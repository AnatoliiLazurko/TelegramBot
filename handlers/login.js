const { loginKeyboard } = require("../utils/loginButtons");
const { loginUser } = require('../services/userService');
const { registrationSessions, loginSessions } = require('../utils/sessionStore');

module.exports = (bot) => {
    bot.action('login', async (ctx) => {
        await ctx.answerCbQuery();
        await ctx.deleteMessage();
        await ctx.reply(
            "–í–∏ –æ–±—Ä–∞–ª–∏ '–£–≤—ñ–π—Ç–∏' üîë \n\n–©–æ–± —É–≤—ñ–π—Ç–∏ –≤ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç, –≤–≤–µ–¥—ñ—Ç—å —Ç–∞–∫—ñ –¥–∞–Ω—ñ ‚¨áÔ∏è",
            loginKeyboard()
        );
        
        // –ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –≤—Ö–æ–¥—É
        loginSessions.set(ctx.from.id, { step: 'username' });
        await ctx.reply("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ª–æ–≥—ñ–Ω:");
    });

    bot.on('text', async (ctx) => {
        const session = loginSessions.get(ctx.from.id);

        if (!session) return;

        if (session.step === 'username') {
            session.username = ctx.message.text;
            session.step = 'password';
            ctx.reply("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å:");
        } else if (session.step === 'password') {
            try {
                // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤—Ö–æ–¥—É
                const user = await loginUser(session.username, ctx.message.text);
                ctx.reply("‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, " + user.username + "!");
            } catch (error) {
                ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞: " + error.message);
            }
            // –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å–µ—Å—ñ—é –≤—Ö–æ–¥—É
            loginSessions.delete(ctx.from.id);
        }
    });

};